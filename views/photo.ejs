<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="index.js" defer></script>
    <link rel="stylesheet" href="style.css" />
    <style>
       #signatureCanvas {
        border: 2px solid #000;
        margin-left: 500px;
    }
        #video {
  border: 1px solid black;
  box-shadow: 2px 2px 3px black;
  width: 320px;
  height: 240px;
}

#photo {
  border: 1px solid black;
  box-shadow: 2px 2px 3px black;
  width: 320px;
  height: 240px;
}

#canvas {
  display: none;
}

.camera {
  width: 340px;
  display: inline-block;
}

.output {
  width: 340px;
  display: none;
  vertical-align: top;
}

#startbutton {
  display: block;
  position: relative;
  margin-left: auto;
  margin-right: auto;
  bottom: 32px;
  background-color: rgb(0 150 0 / 50%);
  border: 1px solid rgb(255 255 255 / 70%);
  box-shadow: 0px 0px 1px 2px rgb(0 0 0 / 20%);
  font-size: 14px;
  font-family: "Lucida Grande", "Arial", sans-serif;
  color: rgb(255 255 255 / 100%);
}

.contentarea {
  font-size: 16px;
  font-family: "Lucida Grande", "Arial", sans-serif;
  width: 760px;
}

#resetbutton {
  display: block;
  position: relative;
  margin-left: auto;
  margin-right: auto;
  bottom: 32px;
  background-color: rgb(0 150 0 / 50%);
  border: 1px solid rgb(255 255 255 / 70%);
  box-shadow: 0px 0px 1px 2px rgb(0 0 0 / 20%);
  font-size: 14px;
  font-family: "Lucida Grande", "Arial", sans-serif;
  color: rgb(255 255 255 / 100%);
}
    </style>
  </head>

  <body style="background-color: #E8ECEF; ">
    <div>
        <h1 style="margin-left: 585px; margin-top: 30px; margin-bottom: 20px;">Photo Verification</h1>
        <form id="photoSubmit" action="/camera" method="POST" enctype="multipart/form-data">
            <div class="contentarea" style="margin-left: 550px;" >
            
                <div class="camera">
                    <video id="video">Video stream not available.</video>
                    <button id="startbutton">Take photo</button>
                </div>
                <canvas id="canvas"> </canvas>
                <div class="output">
                    <img id="photo" alt="The screen capture will appear in this box." />
                    <button id="resetbutton">reset</button>
                </div>
            </div>
            <!-- <h1 style="margin-left: 585px; margin-top: 30px; margin-bottom: 50px;"> Insert Signature </h1>
            <div style="margin-top: 50px; margin-left: 550px; font-size: 20px;">
                <label for="imageInput">Choose an image:</label>
                <input type="file" id="imageInput" name="imageInput" accept="image/*">
            </div> -->

            <h1 style="margin-left: 540px; margin-top: 30px; margin-bottom: 20px;">Online Signature Capture</h1>
            <canvas id="signatureCanvas" width="400" height="200"></canvas>
            <br>
            <button onclick="clearCanvas()" style="bottom: 32px;
            background-color: rgb(0 150 0 / 50%);
            border: 1px solid rgb(255 255 255 / 70%);
            box-shadow: 0px 0px 1px 2px rgb(0 0 0 / 20%);
            font-size: 14px; margin-left: 680px; margin-right: 10px;   color: rgb(255 255 255 / 100%); ">
                Clear
            </button>
            <input style="display: none;" type="text" name="photoURL" id="photoURL" >
            <input style="display: none;" type="text" name="signURL" id="signURL" >
            <button onclick="saveSignature()" style="display: block; height: 30px; width: 200px; margin-top: 40px; margin-left: 600px; font-size: 18px;">Submit</button>

            <!-- <button onclick="submit" style="display: block; height: 30px; width: 200px; margin-top: 40px; margin-left: 600px; font-size: 18px;" > Submit </button> -->
        </form>
    </div>
    <script>
        // The width and height of the captured photo. We will set the
        // width to the value defined here, but the height will be
        // calculated based on the aspect ratio of the input stream.
        let photoURL;
        const width = 320; // We will scale the photo width to this
        let height = 0; // This will be computed based on the input stream

        // |streaming| indicates whether or not we're currently streaming
        // video from the camera. Obviously, we start at false.

        let streaming = false;

        // The various HTML elements we need to configure or control. These
        // will be set by the startup() function.

        let video = null;
        let canvas = null;
        let photo = null;
        let startbutton = null;

        function showViewLiveResultButton() {
            if (window.self !== window.top) {
            // Ensure that if our document is in a frame, we get the user
            // to first open it in its own tab or window. Otherwise, it
            // won't be able to request permission for camera access.
            document.querySelector(".contentarea").remove();
            const button = document.createElement("button");
            button.textContent = "View live result of the example code above";
            document.body.append(button);
            button.addEventListener("click", () => window.open(location.href));
            return true;
            }
            return false;
        }

        function startup() {
            if (showViewLiveResultButton()) {
            return;
            }
            video = document.getElementById("video");
            canvas = document.getElementById("canvas");
            photo = document.getElementById("photo");
            startbutton = document.getElementById("startbutton");
            resetbutton = document.getElementById("resetbutton");
            navigator.mediaDevices
            .getUserMedia({ video: true, audio: false })
            .then((stream) => {
                video.srcObject = stream;
                video.play();
            })
            .catch((err) => {
                console.error(`An error occurred: ${err}`);
            });

            video.addEventListener(
            "canplay",
            (ev) => {
                if (!streaming) {
                height = video.videoHeight / (video.videoWidth / width);

                // Firefox currently has a bug where the height can't be read from
                // the video, so we will make assumptions if this happens.

                if (isNaN(height)) {
                    height = width / (4 / 3);
                }

                video.setAttribute("width", width);
                video.setAttribute("height", height);
                canvas.setAttribute("width", width);
                canvas.setAttribute("height", height);
                streaming = true;
                }
            },
            false
            );

            startbutton.addEventListener(
            "click",
            (ev) => {
                takepicture();
                ev.preventDefault();
                const cam = document.getElementsByClassName("camera");
                console.log(cam);
                cam[0].style.display = "none";
                const out = document.getElementsByClassName("output");
                out[0].style.display = "inline-block";
            },
            false
            );

            clearphoto();

            resetbutton.addEventListener("click", resetPhoto, false);

            function resetPhoto() {
            clearphoto();
            const stream = video.srcObject;
            const tracks = stream.getTracks();
            tracks.forEach((track) => track.stop());

            // Restart the video stream
            navigator.mediaDevices
                .getUserMedia({ video: true, audio: false })
                .then((stream) => {
                video.srcObject = stream;
                video.play();
                })
                .catch((err) => {
                console.error(`An error occurred: ${err}`);
                });
                const cam = document.getElementsByClassName("camera");
                cam[0].style.display = "inline-block";
                const out = document.getElementsByClassName("output");
                out[0].style.display = "none";
            }
        }

        // Fill the photo with an indication that none has been
        // captured.

        function clearphoto() {
            const context = canvas.getContext("2d");
            context.fillStyle = "#AAA";
            context.fillRect(0, 0, canvas.width, canvas.height);

            const data = canvas.toDataURL("image/png");
            photo.setAttribute("src", data);
        }

        // Capture a photo by fetching the current contents of the video
        // and drawing it into a canvas, then converting that to a PNG
        // format data URL. By drawing it on an offscreen canvas and then
        // drawing that to the screen, we can change its size and/or apply
        // other changes before drawing it.

        function takepicture() {
            const context = canvas.getContext("2d");
            if (width && height) {
            canvas.width = width;
            canvas.height = height;
            context.drawImage(video, 0, 0, width, height);

            const data = canvas.toDataURL("image/png");
            photo.setAttribute("src", data);
            console.log(data);
            photoURL=data;

            //stop the camera
            const stream = video.srcObject;
            const tracks = stream.getTracks();
            tracks.forEach((track) => track.stop());
            } else {
            clearphoto();
            }
        }

        // Set up our event listener to run the startup process
        // once loading is complete.
        window.addEventListener("load", startup, false);


        var spiderMan = document.getElementById("signatureCanvas");
    var ironMan = spiderMan.getContext("2d");

    var thor = false;
    var captainAmerica = 0;
    var hulk = 0;

    spiderMan.addEventListener("mousedown", startDrawing);
    spiderMan.addEventListener("mousemove", draw);
    spiderMan.addEventListener("mouseup", stopDrawing);
    spiderMan.addEventListener("mouseout", stopDrawing);

    function startDrawing(e) {
        thor = true;
        [captainAmerica, hulk] = [e.offsetX, e.offsetY];
    }

    function draw(e) {
        if (!thor) return;
        ironMan.beginPath();
        ironMan.moveTo(captainAmerica, hulk);
        ironMan.lineTo(e.offsetX, e.offsetY);
        ironMan.stroke();
        [captainAmerica, hulk] = [e.offsetX, e.offsetY];
    }

    function stopDrawing() {
        thor = false;
    }

    function clearCanvas() {
        ironMan.clearRect(0, 0, spiderMan.width, spiderMan.height);
    }

    function saveSignature() {
        // You can save the signature data or convert it to an image format
        // For simplicity, let's just alert the data URL
        var blackWidow = spiderMan.toDataURL();
        
        document.getElementById("photoURL").value=photoURL;
        document.getElementById("signURL").value=blackWidow;
        // console.log(photoURL,"  ->  " ,blackWidow);

        // var imageUrl = photoURL; // Replace with your image URL
        //     fetch(imageUrl)
        //         .then(response => response.blob())
        //         .then(blob => {
        //             var formData = new FormData();
        //             formData.append('image', blob, 'image.jpg');
        //             fetch('/save-image', {
        //                 method: 'POST',
        //                 body: formData
        //             })
        //             .then(response => {
        //                 if (response.ok) {
        //                     console.log('Image saved successfully');
        //                 } else {
        //                     console.error('Failed to save image');
        //                 }
        //             })
        //             .catch(error => {
        //                 console.error('Error:', error);
        //             });
        //         })
        //         .catch(error => {
        //             console.error('Error:', error);
        //         });

        document.getElementById("photoSubmit").submit();

    }
        
    </script>
  </body>
</html>